<?php/* * Classe que representa a tabela "historicos" da base "T-shaped"  * e os comandos de acesso aos dados */class historicosDAO{	//atributos (variáveis) relacionadas as colunas da tabela	protected $id;	protected $qualificacoes_has_usuarios_id;	protected $nota;	protected $dt_cadastro;	//método construtor que já faz a conexão com o BD	public function historicosDAO() {}		//métodos para obter e ajustar dados das variáveis (get e set)		// -- SET id	public function setId($id) {		$this->id = $id;	}        // -- GET id	public function getId() {		return $this->id;	}	// -- SET qualificacoes_has_usuarios_id	public function setQualificacoes_has_usuarios_id($qualificacoes_has_usuarios_id) {		$this->qualificacoes_has_usuarios_id = $qualificacoes_has_usuarios_id;	}        // -- GET qualificacoes_has_usuarios_id	public function getQualificacoes_has_usuarios_id() {		return $this->qualificacoes_has_usuarios_id;	}	// -- SET nota	public function setNota($nota) {		$this->nota = $nota;	}        // -- GET nota	public function getNota() {		return $this->nota;	}	// -- SET dt_cadastro	public function setDt_cadastro($dt_cadastro) {		$this->dt_cadastro = $dt_cadastro;	}        // -- GET dt_cadastro	public function getDt_cadastro() {		return $this->dt_cadastro;	}    //método que faz a inserção de Historicos no BD    public static function insert($obj) {        //pegar os dados do objeto        $id                             = $obj->getId();        $qualificacoes_has_usuarios_id  = $obj->getQualificacoes_has_usuarios_id();        $nota                           = $obj->getNota();        $dt_cadastro                    = $obj->getDt_cadastro();        if (empty($dt_cadastro))                $dt_cadastro = "now()";        if (empty($dt_atualizacao))                $dt_atualizacao = "now()";        //montar o comando SQL        $sql = "insert into Historicos                       (id                       ,qualificacoes_has_usuarios_id                       ,nota                       ,dt_cadastro)                values                       ('$id'                       ,'$qualificacoes_has_usuarios_id'                       ,'$nota'                       ,'$dt_cadastro')";        $sql = str_replace("''", "null", $sql);        $sql = str_replace("'now()'", "now()", $sql);        // abre a conexão com o BD        $dba = new DbAdmin();        $dba->connectDefault();        //executar o comando SQL        $res = $dba->query($sql);        $retorno = Array();        if (!$res) {                $retorno[0] = mysql_errno();                $retorno[1] = mysql_error();                $retorno[2]  = "";        }        else {            $id = mysql_insert_id();            $sql = "select * from Historicos where id = $id";            $res = $dba->query($sql);            $num = $dba->rows($res);                if (!$res) {                        $retorno[0] = mysql_errno();                        $retorno[1] = mysql_error();                        $retorno[2] = "";                }                else {                        $id                             = $dba->result($res, 0, "id");                        $qualificacoes_has_usuarios_id  = $dba->result($res, 0, "qualificacoes_has_usuarios_id");                        $nota                           = $dba->result($res, 0, "nota");                        $dt_cadastro                    = $dba->result($res, 0, "dt_cadastro");                        $retObj = new HistoricosExt();                        $retObj->setId($id);                        $retObj->setQualificacoes_has_usuarios_id($qualificacoes_has_usuarios_id);                        $retObj->setNota($nota);                        $retObj->setDt_cadastro($dt_cadastro);                        $retorno[0] = 0;                        $retorno[1] = "";                        $retorno[2] = $retObj;                } // if (!$res)...        } // if (!$res)...	return $retorno;    }    //Método que faz a atualização de Historicos no BD    public static function update($obj) {        //pegar os dados do objeto        $id                             = $obj->getId();        $qualificacoes_has_usuarios_id  = $obj->getQualificacoes_has_usuarios_id();        $nota                           = $obj->getNota();        $dt_cadastro                    = $obj->getDt_cadastro();        if (empty($dt_atualizacao))                $dt_atualizacao = "now()";        //montar o comando SQL        $sql = "update Historicos           set                qualificacoes_has_usuarios_id = '$qualificacoes_has_usuarios_id'               ,nota                          = '$nota'               ,dt_cadastro                   = '$dt_cadastro'         where id = $id";        $sql = str_replace("''", "null", $sql);        $sql = str_replace("'now()'", "now()", $sql);            // abre a conexão com o BD            $dba = new DbAdmin();            $dba->connectDefault();            //executar o comando SQL            $res = $dba->query($sql);            $retorno = Array();            if (!$res) {                    $retorno[0] = mysql_errno();                    $retorno[1] = mysql_error();                    $retorno[2]  = "";            }            else {            $sql = "select * from Historicos where id = $id";            $res = $dba->query($sql);                if (!$res) {                        $retorno[0] = mysql_errno();                        $retorno[1] = mysql_error();                        $retorno[2] = "";                }                else {                    $id                             = $dba->result($res, 0, "id");                    $qualificacoes_has_usuarios_id  = $dba->result($res, 0, "qualificacoes_has_usuarios_id");                    $nota                           = $dba->result($res, 0, "nota");                    $dt_cadastro                    = $dba->result($res, 0, "dt_cadastro");                    $retObj = new HistoricosExt();                    $retObj->setId($id);                    $retObj->setQualificacoes_has_usuarios_id($qualificacoes_has_usuarios_id);                    $retObj->setNota($nota);                    $retObj->setDt_cadastro($dt_cadastro);                    $retorno[0] = 0;                    $retorno[1] = "";                    $retorno[2] = $retObj;                } // if (!$res)...        } // if (!$res)...	return $retorno;    }    //método que faz a exclusão de Historicos no BD    public static function delete($id) {            //montar o comando SQL            $sql = "delete from Historicos where id = $id";            // abre a conexão com o BD            $dba = new DbAdmin();            $dba->connectDefault();            //executar o comando SQL            $res = $dba->query($sql);            $retorno = Array();            if (!$res) {               $retorno[0] = mysql_errno();               $retorno[1] = mysql_error();            }            else {               $retorno[0] = "0";               $retorno[1] = "";            }            return $retorno;    }    /* Método estático que retorna os regsitros da tabela     * Historicos conforme o filtro informado. */    public static function select($where="", $orderBy="", $limite=0, $offset=0) {        $dba = new DbAdmin();        $dba->connectDefault();        if (!empty($where))                $where = "where $where";        if (!empty($orderBy))                $where .= " order by $orderBy";        $sql = "select * from Historicos $where";        if ($limite > 0)                $sql.= " limit " . $limite;        if ($offset > 0)                $sql.= " offset " . $offset;        $res = $dba->query($sql);        $num = $dba->rows($res);        $vet = array();        for ($i=0; $i < $num; $i++) {            $id                             = $dba->result($res, $i, "id");            $qualificacoes_has_usuarios_id  = $dba->result($res, $i, "qualificacoes_has_usuarios_id");            $nota                           = $dba->result($res, $i, "nota");            $dt_cadastro                    = $dba->result($res, $i, "dt_cadastro");			$vet[$i] = new HistoricosExt();            $vet[$i]->setId($id);            $vet[$i]->setQualificacoes_has_usuarios_id($qualificacoes_has_usuarios_id);            $vet[$i]->setNota($nota);            $vet[$i]->setDt_cadastro($dt_cadastro);	}        $vetRetorno = Array(((!$num) ? 0 : $num), $vet);        //matriz com os dados (linhas e colunas)        return $vetRetorno;    }    /* Método estático que retorna um unico regsitro da tabela     * Historicos conforme chave informada. */    public static function selectOne($id) {        $dba = new DbAdmin();        $dba->connectDefault();        $sql = "select * from Historicos where id = '$id'";        $res = $dba->query($sql);        $num = $dba->rows($res);        $obj = new HistoricosExt();        if ($num > 0) {            $id                             = $dba->result($res, 0, "id");            $qualificacoes_has_usuarios_id  = $dba->result($res, 0, "qualificacoes_has_usuarios_id");            $nota                           = $dba->result($res, 0, "nota");            $dt_cadastro                    = $dba->result($res, 0, "dt_cadastro");            $obj->setId($id);            $obj->setQualificacoes_has_usuarios_id($qualificacoes_has_usuarios_id);            $obj->setNota($nota);            $obj->setDt_cadastro($dt_cadastro);	}	return $obj;    }}?>